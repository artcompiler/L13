/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil -*- */
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

// Generate a node pool and tree graph of an AST

class Renderer {
    use default namespace internal,
        namespace internal;

    var compact;
    var root;
    public function Renderer(root) {
        while (root is Array || root.class !== "Program") {
            print("root="+root)
            if (root is Array) {
                root = root[0]
            }
            else {
                root = root.elts[0]
            }
        }
        this.root = root
    }

    var pool = { }   // map from node id to node

    public function render(node=null) {

        if (node===null) {
            return render(root)
        }

        if (node is Array) {
            let list = []
            for (let i = 0; i < node.length; i++) {
                list.push(render(node[i]))
            }
            return list
        }
        
        // if there is no node id then return the empty array (this is a leaf node)
        if (node is Number ||
            node is String ||
            node is Boolean ||
            node === void 0 ||
            node === null ||
            node.id === void 0) {
            return []
        }

        if (pool[node.id] === void 0) {
            pool[node.id] = node
        }

        let tagName = node.tag
        let edges = [ ]
        if (node.elts) {
            let edge
            for (let i = 0; i < node.elts.length; i++) {
                let edge = render(node.elts[i])
                if (edge is Array) {
                    edges = edges.concat(edge)
                }
                else {
                    edges.push(edge)
                }
            }
        }

        return {
            id: node.id,
            class: node.class,
            edges: edges
        }
    }


    function sanitize(s) {
        let r = "";
        let i = 0;
        let l = s.length;
        outer:
        while (i < l) {
            let start = i;
            while (i < l) {
                let c = s.charCodeAt(i);
                if (c < 32 ||
                    c == Char::BackSlash || 
//                    c == Char::SingleQuote || 
//                    c == Char::DoubleQuote ||
                    c == Char::UnicodePS ||
                    c == Char::UnicodeLS) {
                    r += s.substring(start, i);
                    r += uescape(c);
                    i++;
                    continue outer;
                }
                if (c == Char::Ampersand) {
                    r += s.substring(start, i);
                    r += "&amp;"
                    i++;
                    continue outer;
                }
                if (c == Char::LeftAngle) {
                    r += s.substring(start, i);
                    r += "&lt;"
                    i++;
                    continue outer;
                }
                i++;
            }
            r += s.substring(start, i);
        }
        return r
    }

    function uescape(c)
        "\\u" + (c+0x10000).toString(16).substring(1);
}
